{
  "rules": {
    //If the user isn't authenticated, don't let them do anything
    //".read": "auth != null",
    //".write": "auth != null",

    //Doesn't really need any rules actually - but when a user wants to
    //  create a new doc they write their uid as a key here, functions
    //  handles the rest
    "newDocs": {
      ".read": "auth != null",
      ".write": "auth != null"
    },
    "users": {
      "$uid": {
        //Users shouldn't write directly to this - everything goes through
        //  cloud functions instead. Users are added here when a new doc is
        //  created or when they are added to a doc.
        ".read": "$uid === auth.uid",

        "$docid": {
          ".validate": "newData.isBoolean()"
        }
      }
    },
    //Check "users" for the uid, then see if an entry matches the docid
    //as it is now, if the user has access they can change anything - 
    //  might want to add an 'owner' to prevent some data from changing
    "docs": {
      "$docid": {
        ".write": "root.child('users/' + auth.uid + '/' + $docid).exists() && root.child('users/' + auth.uid + '/' + $docid).val() == true",
        ".read": "root.child('users/' + auth.uid + '/' + $docid).exists() && root.child('users/' + auth.uid + '/' + $docid).val() == true",

        "title": {
          ".validate": "newData.isString()"
        },
        "sprintOverview": {
          ".validate": "newData.isString()"
        },
        "schedule": {
          ".validate": "newData.isString()"
        },
        "risks": {
          ".validate": "newData.isString()"
        },
        "users": {
          "$uid": {
            ".validate": "newData.isBoolean()"
          }
        },
        "people": {
          "$index": {
            "name": {
              ".validate": "newData.isString()"
            },
            "email": {
              ".validate": "newData.isString()"
            },
            "phone": {
              ".validate": "newData.isString()"
            }
          }
        },
        "master": {
          //TODO fix this rule
          ".validate": "newData.isNumber()"// && root.child('docs/' + $docid + '/people').hasChild(newData.val())"
        },
        "userStories": {
          "$index": {
            "title": {
              ".validate": "newData.isString()"
            },
            "notes": {
              ".validate": "newData.isString()"
            },
            "tasks": {
              "$taskIndex": {
                "title": {
                  ".validate": "newData.isString()"
                },
                "notes": {
                  ".validate": "newData.isString()"
                },
                "estimatedTime": {
                  ".validate": "newData.isNumber()"
                },
                "actualTime": {
                  ".validate": "newData.isNumber()"
                },
                "assignedTo": {
                  ".validate": "newData.isNumber() && root.child('docs/' + $docid + '/people').hasChild(newData.val())"
                },
                "progress": {
                  //Check that not only is it a string, but its one of these possibilities
                  ".validate": "newData.isString() && (newData.val() == 'inprogress' || newData.val() == 'completed' || newData.val() == 'notstarted' || newData.val() == 'failed')"
                }
              }
            },
            "acceptanceCriteria": {
              "$index": {
                ".validate": "newData.isString()"
              }
            }
          }
        },
        "backlog": {
          "$index": {
            "title": {
              ".validate": "newData.isString()"
            },
            "progress": {
              ".validate": "newData.isString() && (newData.val() == 'inprogress' || newData.val() == 'completed' || newData.val() == 'notstarted' || newData.val() == 'failed')"              
            }
          }
        }    
      }
    }
  }
}

/*
approximate structure of db:
{
  "users": {
    "uid": {
      "docid": true,
      "docid": true,
    },
    "uid": {
      "docid": true
    }
  },
  "docs": {
    "docid": {
      "title": "Some String",
      "users": {
        "uid": true,
        "uid": true
      },
      //http://firebase.googleblog.com/2014/04/best-practices-arrays-in-firebase.html
      //arrays are stored internally as objects with int keys, but thats all the same
      "people": [
        "Bob", "Name2", "Name3"
      ],
      "userStories": [
        {
          "title": "As a user, i want to something",
          "notes": "Some string",
          "tasks": [
            {
              "title": "Do something with some code",
              "notes": "maybe put a helpful link here",
              "estimatedTime": 3,
              "actualTime": NULL,
              "assignedTo": 1,
              "progress": "inprogress"
            },
            {
              "title": "Do something else with some code",
              "notes": "maybe put a helpful link here",
              "estimatedTime": 6,
              "actualTime": 4,
              "assignedTo": 2,
              "progress": "completed"
            },
            {
              "title": "Do something else",
              "notes": "maybe put a helpful link here",
              "estimatedTime": 2,
              "actualTime": NULL,
              "assignedTo": 1,
              "progress": "notstarted"
            }
          ]
        },
        {
          "title": "As a user, i want to something else",
          "notes": "Some string",
          "tasks": [
            {
              "title": "Do something with some code",
              "notes": "maybe put a helpful link here",
              "estimatedTime": 3,
              "actualTime": NULL,
              "assignedTo": 0,
              "progress": "inprogress"
            },
            {
              "title": "Do something else with some code",
              "notes": "maybe put a helpful link here",
              "estimatedTime": 6,
              "actualTime": 4,
              "assignedTo": 0,
              "progress": "completed"
            }
          ]
        }
      ]
    },
    "docid": {
      "title": "Some String",
      "users": {
        "uid": true
      },
      "people": [
        "Bob"
      ],
      "userstories": []
    }
  }
}

 */
